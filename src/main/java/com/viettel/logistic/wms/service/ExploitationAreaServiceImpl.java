/*
 * Copyright (C) 2011 Viettel Telecom. All rights reserved.
 * VIETTEL PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */
package com.viettel.logistic.wms.service;

import com.viettel.logistic.wms.dto.ExploitationAreaDTO;
import com.viettel.logistic.wms.model.ExploitationArea;
import com.viettel.vfw5.base.dto.ResultDTO;
import com.viettel.vfw5.base.service.BaseFWServiceInterface;
import com.viettel.vfw5.base.utils.DataUtil;
import com.viettel.vfw5.base.utils.ParamUtils;
import java.util.List;
import java.util.Locale;
import javax.jws.WebService;
import org.springframework.beans.factory.annotation.Autowired;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.hibernate.HibernateException;

/**
 * @author ngocnd6
 * @version 1.0
 * @since 08-Apr-15 2:27 PM
 */
@WebService(endpointInterface = "com.viettel.logistic.wms.service.ExploitationAreaService")
public class ExploitationAreaServiceImpl implements ExploitationAreaService {

    @Autowired
    BaseFWServiceInterface exploitationAreaBusiness;

    @Override
    public String updateExploitationArea(ExploitationAreaDTO exploitationAreaDTO) {
        try {
            return exploitationAreaBusiness.update(exploitationAreaDTO);
        } catch (HibernateException ex) {
            return ex.getMessage();
        }

    }

    @Override
    public String deleteExploitationArea(Long id) {
        return exploitationAreaBusiness.delete(id);
    }

    @Override
    public String deleteListExploitationArea(List<ExploitationAreaDTO> exploitationAreaListDTO) {
        return exploitationAreaBusiness.delete(exploitationAreaListDTO);
    }

    @Override
    public ExploitationAreaDTO findExploitationAreaById(Long id) {
        if (id != null && id > 0) {
            return (ExploitationAreaDTO) exploitationAreaBusiness.findById(id).toDTO();
        }
        return null;
    }

    @Override
    public List<ExploitationAreaDTO> getListExploitationAreaDTO(ExploitationAreaDTO exploitationAreaDTO, int rowStart, int maxRow, String sortType, String sortFieldList) {
        if (exploitationAreaDTO != null) {
            return exploitationAreaBusiness.search(exploitationAreaDTO, rowStart, maxRow, sortType, sortFieldList);
        }
        return null;
    }

//    @Override
//    public ResultDTO insertExploitationArea(ExploitationAreaDTO exploitationAreaDTO) {
//        return exploitationAreaBusiness.createObject(exploitationAreaDTO);
//    }
    @Override
    public ResultDTO insertExploitationArea(ExploitationAreaDTO exploitationAreaDTO) {
        ResultDTO resultDTO = new ResultDTO();
        Class<?> c = exploitationAreaDTO.getClass();
        HashMap<String, String> hasmap = new HashMap<>();
        ExploitationArea exploitationArea = new ExploitationArea();
        String[] lstColumnUnique = exploitationArea.getUniqueColumn();
        for (int i = 0; i < lstColumnUnique.length; i++) {
            try {
                Method method = c.getMethod(DataUtil.getGetterOfColumn(lstColumnUnique[i]));
                try {
                    hasmap.put(lstColumnUnique[i], (String) method.invoke(exploitationAreaDTO));
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(ExploitationAreaServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalArgumentException ex) {
                    Logger.getLogger(ExploitationAreaServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InvocationTargetException ex) {
                    Logger.getLogger(ExploitationAreaServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                }
            } catch (NoSuchMethodException ex) {
                Logger.getLogger(ExploitationAreaServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SecurityException ex) {
                Logger.getLogger(ExploitationAreaServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        try {
            Boolean check = exploitationAreaBusiness.isDuplicate(null, hasmap);
            if (!check) {
                resultDTO = exploitationAreaBusiness.createObject(exploitationAreaDTO);
                resultDTO.setKey(ParamUtils.SUCCESS);
            } else {

                resultDTO.setKey("ERROR_EXISTED");

            }
        } catch (Exception e) {
            resultDTO.setKey("ERROR_SYSTEM");
        }
        return resultDTO;
    }
}
